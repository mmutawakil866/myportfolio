[{"content":"","date":null,"permalink":"http://localhost:1313/tags/api/","section":"Tags","summary":"","title":"Api"},{"content":"","date":null,"permalink":"http://localhost:1313/blogs/","section":"Blogs","summary":"","title":"Blogs"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/dhikr/","section":"Tags","summary":"","title":"Dhikr"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/express/","section":"Tags","summary":"","title":"Express"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/ffmpeg/","section":"Tags","summary":"","title":"Ffmpeg"},{"content":"After setting up the artists resource, we shifted focus to a new and more complex one: Dhikr, which is heavily dependent on audio files.\nSchema Setup #We started by defining the Mongoose schema for dhikr documents in MongoDB:\nconst mongoose = require(\u0026#34;mongoose\u0026#34;); const dhikrSchema = new mongoose.Schema( { title: { type: String, required: true }, description: { type: String }, artist: { type: String }, listens: { type: Number, default: 0 }, likes: { type: Number, default: 0 }, likedBy: { type: [String] }, tags: { type: [String] }, duration: { type: Number }, status: { type: String, enum: [\u0026#34;processing\u0026#34;,\u0026#34;failed\u0026#34;,\u0026#34;pending\u0026#34;,\u0026#34;verified\u0026#34;], default: \u0026#34;processing\u0026#34;, }, uploadedType: { type: String, enum: [\u0026#34;link\u0026#34;,\u0026#34;audio\u0026#34;,\u0026#34;video\u0026#34;], }, link: { type: String }, }, { timestamps: true } ); module.exports = mongoose.model(\u0026#34;Dhikr\u0026#34;, dhikrSchema); This schema captures not only metadata (title, description, artist, tags, etc.) but also the file type, status, and interaction metrics (likes, listens).\nController + Service Setup #We created a controller file and a service file for Dhikr.\nAll business logic lives in the service layer, while the controller just coordinates requests and responses. This code splitting makes the project easier to maintain and extend.\ncreateDhikr Endpoint #Our first endpoint was createDhikr. Hereâ€™s how we designed it:\nIt accepts multipart/form-data with both metadata and an audio file. Because audio files can be large, we used Node.js worker threads to offload file processing to a separate worker. We accounted for three upload types: Audio â†’ directly uploaded to Cloudflare R2 Video â†’ processed with ffmpeg to extract audio Link â†’ processed with yt-dlp to download audio from YouTube (or other supported platforms) Once processed, the resulting audio file is uploaded to Cloudflare R2 for storage.\nSwapping Audio Files #We also added an endpoint to swap out old audio files:\nThe old file is deleted from Cloudflare R2 A worker thread uploads the new file The MongoDB document is updated with the new file reference Current Status #At this stage, the Dhikr resource supports:\nSchema for saving dhikr documents in MongoDB A createDhikr endpoint that handles audio, video, and links Worker-based processing for large file uploads R2 storage integration for finalized audio files An endpoint to replace existing audio files safely This is a big milestone for the Sufii API, as Dhikr will be one of the core resources in the ecosystem. ðŸŽ§\n","date":"13 September 2025","permalink":"http://localhost:1313/blogs/working-on-the-dhikr-resource/","section":"Blogs","summary":"We added the Dhikr resource to the Sufii API: setting up a schema in MongoDB, handling audio uploads with worker threads, processing video and links into audio, and integrating Cloudflare R2 storage.","title":"Implementing the Dhikr Resource"},{"content":"","date":null,"permalink":"http://localhost:1313/","section":"mmutawakil","summary":"","title":"mmutawakil"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/mongodb/","section":"Tags","summary":"","title":"Mongodb"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/nodejs/","section":"Tags","summary":"","title":"Nodejs"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/sufii/","section":"Tags","summary":"","title":"Sufii"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/worker-threads/","section":"Tags","summary":"","title":"Worker-Threads"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/yt-dlp/","section":"Tags","summary":"","title":"Yt-Dlp"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/backend/","section":"Tags","summary":"","title":"Backend"},{"content":"Today marks the beginning of the Sufii API Project, an API that will eventually power an ecosystem of Suufi (of the Tijanniyya sect) products. This is the foundation stage, where we have put together the initial structure, tools, and first endpoints.\nTech Stack # Node.js + Express â†’ backend framework MongoDB â†’ database setup Cloudflare R2 â†’ object storage (S3-compatible) for profile images AWS SDK for JavaScript (v3) â†’ to interact with R2 storage Project Setup #We initialized the backend and organized the project into standard folders for scalability:\ncontrollers/ services/ helpers/ models/ routes/ middlewares/ config/ This structure will make it easier to extend and maintain as the API grows.\nFeatures Implemented So Far #1. Middleware for Profile Image Uploads # Implemented an upload flow where Multer first attaches the file to the request object. Added a middleware to push uploaded images to Cloudflare R2, using @aws-sdk/client-s3 since R2 is S3-compatible. 2. Artist Resource (First Endpoint) # Built out the controller, service, and route for the first resource: artists. This marks the first official endpoint of the API. 3. Manual Testing with Postman # Verified endpoints using Postman to ensure the routes, controllers, and services were all wired correctly. Current Status #At this stage, we have:\nA working project structure Middleware for file uploads to Cloudflare R2 The first resource (artists) implemented and tested Next Steps # Add more resources to the API Expand middleware and helper functions Set up automated testing for endpoints Prepare deployment workflows (possibly through Cloudflare Pages/Workers in future) This is just the beginning of the Sufii API. Each update will bring us closer to powering the wider ecosystem of Suufi products. ðŸš€\n","date":"13 September 2025","permalink":"http://localhost:1313/blogs/suufi/","section":"Blogs","summary":"Kicking off the Sufii API project: setting up Node.js + Express with MongoDB, adding middleware for file uploads to Cloudflare R2, and implementing the first artists endpoint.","title":"Initiating the Sufii API Project"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/ci-cd/","section":"Tags","summary":"","title":"Ci-Cd"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"After building my portfolio with Hugo and the Congo theme, the next step was to get it online. For this, I chose Cloudflare Pages. ðŸš€\nWhat is Cloudflare Pages? #Cloudflare Pages is a JAMstack platform for deploying static websites directly from your GitHub or GitLab repository. It automatically builds and deploys your site whenever you push changes â€” no servers to manage, no manual uploads.\nSome benefits include:\nFree and fast global CDN Automatic builds with continuous integration (CI) Continuous deployment (CD) for every push Easy GitHub/GitLab integration Steps I Followed #1. Linked My GitHub Account #On the Cloudflare Pages dashboard, I linked my GitHub account so that Cloudflare could access my repositories.\n2. Selected My Repository #From the list of repositories, I selected the one that contained my Hugo + Congo portfolio.\n3. Configured Build Settings #Cloudflare Pages recognized that my site used Hugo. I simply confirmed the defaults:\nFramework preset: Hugo Build command: hugo Output directory: public 4. Continuous Integration + Deployment #The best part: I donâ€™t have to deploy manually anymore. Cloudflare Pages automatically:\nRuns the build process whenever I push changes to GitHub Deploys the updated version to a global CDN Provides a live URL and even preview deployments for branches The Result #Within a few minutes, my portfolio was live on the web â€” and every update I push to GitHub now goes live automatically. ðŸ™Œ\nThis setup makes it easy for me to focus on writing content and improving my site, while Cloudflare handles deployment in the background.\nâœ… Next, Iâ€™ll be writing about how I plan to organize and publish posts here â€” stay tuned!\n","date":"13 September 2025","permalink":"http://localhost:1313/blogs/deploying-to-cloudflare/","section":"Blogs","summary":"How I deployed my Hugo + Congo portfolio using Cloudflare Pages.","title":"Deploying My Portfolio with Cloudflare Pages"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/deployment/","section":"Tags","summary":"","title":"Deployment"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/portfolio/","section":"Tags","summary":"","title":"Portfolio"},{"content":"Iâ€™m really excited to share my very first portfolio website, built with Hugo and the Congo theme. ðŸŽ‰\nThis portfolio is a big step for me â€” it will serve as a place to showcase my projects, write posts, and share my journey in tech.\nWhy Hugo + Congo? # Hugo is a super-fast static site generator. Once I learned the basics, it became much easier to structure my site. Congo is a clean, minimal, and customizable theme that works perfectly for portfolios and blogs. Setup Commands #Here are some of the key commands I used to get my portfolio up and running:\n# Create a new Hugo site hugo new site my-portfolio # Move into the new site cd my-portfolio # Initialize Hugo modules (instead of using git submodules) hugo mod init github.com/yourusername/my-portfolio # Add the Congo theme hugo mod get github.com/jpanther/congo/v2 # Copy the example config from Congo cp -r themes/congo/config/_default config/_default # Run the development server hugo server ","date":"13 September 2025","permalink":"http://localhost:1313/blogs/my-first-portfolio/","section":"Blogs","summary":"How I built my first portfolio using Hugo and the Congo theme.","title":"Launching My First Portfolio"},{"content":"","date":null,"permalink":"http://localhost:1313/tags/webdev/","section":"Tags","summary":"","title":"Webdev"},{"content":"","date":null,"permalink":"http://localhost:1313/categories/","section":"Categories","summary":"","title":"Categories"}]